-# REVIEW: This logic should go in a helper

- provider = 'evernote'
- signed_in_with_evernote = user_signed_in? && current_user.authorizations.pluck(:provider).include?(provider.to_s)
- status = signed_in_with_evernote ? 'connected' : 'connect'
- active_panel = 0
- active_panel = 1 if signed_in_with_evernote
- active_panel = 3 unless @channel.notebooks.nil? && @channel.name.nil?


= render 'upgrade_alert' if signed_in_with_evernote && current_user.plan != Plan.free

= form_for @channel do |f|

  fieldset.oauth

    legend class="#{ status }"
      | Connect your Evernote account
    div class= status
      - if signed_in_with_evernote
        p
          | Your Evernote account (#{ current_user.authorizations.where(provider: provider).first.nickname }) is connected.
      - else
        = link_to 'Click here to connect your Evernote account.', omniauth_authorize_path(resource_name, provider)

  fieldset class="notebooks #{ signed_in_with_evernote ? '' : 'disabled' }" data-shared-notebooks="#{ @plan.shared_notebooks }" data-business-notebooks="#{ @plan.business_notebooks }"
    legend class="#{ @channel.notebooks.nil? ? '' : 'completed' }"
      | Choose an Evernote notebook
    div
      - unless @channel.errors[:notebooks].empty?
        p.error = "Notebook #{ @channel.errors.messages[:notebooks].join(', ') }."

      - @evernote_notebooks_list.each do |notebook|
        = f.label :notebooks, notebook[:name], value: notebook[:guid]
          -# FIXME: Not ideal, this span is unsemantic. put radio button outside label
          span class="#{ notebook[:shared] ? 'shared' : nil } #{ notebook[:business] ? 'business' : nil }"
            = notebook[:name]
          = f.radio_button :notebooks, notebook[:guid], required: true, data: { shared: notebook[:shared], business: notebook[:business] }

  fieldset class="name #{ signed_in_with_evernote ? '' : 'disabled' }"
    legend class="#{ @channel.name.nil? ? '' : 'completed' }"
      | Name your website
    div
      - unless @channel.errors[:name].empty?
        p.error = "Name #{ @channel.errors.messages[:name].join(', ') }."
      label for='name'
        = f.text_field :name, autocomplete: 'off',  pattern: ".{3,70}", required: true, placeholder: 'Website name'
        div.available
          | Use between 3 and 70 alphanumeric characters.

  - if mode == 'edit'
    fieldset class="theme#{ signed_in_with_evernote ? '' : ' disabled' }" data-premium-themes="#{ @plan.premium_themes }"
      legend
        | Choose a theme
      div
        - @themes.each do |theme|
          = f.label :theme_id, theme.name, value: theme.id
            -# FIXME: Not ideal, this span is unsemantic. put radio button outside label
            -# Premium class goes here because we can't use :before with input/radio
            span class="#{ theme.premium? ? 'premium' : nil }"
              = theme.name.titlecase
            = f.radio_button :theme_id, theme.id, checked: (@channel.theme_id == theme.id || @channel.theme.nil? && theme.name == 'Nembrot'), data: { slug: theme.slug, premium: theme.premium }, required: true

    - if @plan.advanced_settings
      fieldset class="advanced-settings"
        legend
          | Advanced settings
        div

          label for='versions'
            span Versions
            = f.check_box :versions, id: 'versions', checked: @channel.versions
 
          label for='comments'
            span Comments
            = f.check_box :comments, checked: @channel.comments

          label for='always_reset_on_create'
            span Always reset on create
            = f.check_box :always_reset_on_create, checked: @channel.always_reset_on_create

          label = f.text_field :disqus_shortname, pattern: "[a-z0-9]{3,40}", placeholder: 'Disqus shortname'
          label = f.text_field :follow_on_facebook, pattern: "[a-z0-9]{3,40}", placeholder: 'Facebook page'
          label = f.text_field :follow_on_soundcloud, pattern: "[a-z0-9]{3,40}", placeholder: 'Soundcloud channel'
          label = f.text_field :follow_on_tumblr, pattern: "[a-z0-9]{3,40}", placeholder: 'Tumblr'
          label = f.text_field :follow_on_twitter, pattern: "[a-z0-9]{3,40}", placeholder: 'Twitter'
          label = f.text_field :follow_on_vimeo, pattern: "[a-z0-9]{3,40}", placeholder: 'Viemo channel'
          label = f.text_field :follow_on_youtube, pattern: "[a-z0-9]{3,40}", placeholder: 'Youtube channel'
          label = f.text_field :contact_email, pattern: "[a-z0-9]@[a-z\.]{2,8}", placeholder: 'Contact email (public)'
          label = f.text_field :google_analytics_key, pattern: "[a-z0-9]{3,40}", placeholder: 'Google Analytics key'
          label = f.text_field :facebook_app_id, pattern: "[a-z0-9]{3,40}", placeholder: 'Facebok app id'
          label = f.text_field :url, pattern: "[a-z0-9]{3,40}", placeholder: 'Your url (redirect to 00.00.00.00)'

  - else
    = f.text_field :theme_id, value: 1, hidden: true

  = f.text_field :id, hidden: true

  .actions
    = f.submit t("channels.#{ mode }.submit")

    = link_to 'My sites', channels_path, class: 'cancel', title: 'Cancel and back to My Sites' if user_signed_in? && !current_user.channels.empty?

    = link_to 'Delete', @channel, data: {confirm: 'Are you sure?'}, method: :delete, class: 'delete', title: 'Delete channel' if mode == 'edit'

javascript:
  $(function() {
    $('#dashboard form').accordion({
      header: 'fieldset:not(.disabled) legend',
      heightStyle: 'content',
      active: #{ active_panel }
    });
  });

  var notebooks_div = $('#dashboard .notebooks div');
  var notebooks_checked = $('#dashboard .notebooks input:checked');
  if (notebooks_div.length && notebooks_checked.length) {
    notebooks_div.scrollTop(notebooks_checked.position().top);
  }

  window.Nembrot.transform_radio_buttons_to_select()

- if mode == 'edit'

  javascript:

    if ($('[data-theme-wrapper]').data('channel-id') != #{ @channel.id }) {
      $.pjax({ url: '#{ home_path(@channel) }', container: '[data-pjax-container]' });
    }

    var theme_div = $('#dashboard .theme div');
    var theme_checked = $('#dashboard .theme input:checked');
    if (theme_div.length && theme_checked.length) {
      theme_div.scrollTop(theme_checked.position().top);
    }
    $('#dashboard .theme input:checked').focus();

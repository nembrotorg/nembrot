ul.user

  - if devise_mapping.recoverable? && controller_name == 'sessions' && action_name == 'new'
    li = link_to t('devise.passwords.new.title'), new_password_path(resource_name)

  - if devise_mapping.registerable? && controller_name != 'registrations'
    li = link_to t('devise.registrations.new.title'), new_registration_path(resource_name)

  - if devise_mapping.confirmable? && controller_name != 'confirmations'
    li = link_to t('devise.links.no_confirmation'), new_confirmation_path(resource_name)

  - if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks'
    li = link_to t('devise.links.no_unlock'), new_unlock_path(resource_name)

  - unless user_signed_in? || controller_name == 'sessions'
    li = link_to t('devise.sessions.new.title'), new_session_path(resource_name)

  - if user_signed_in?
    li= link_to t('devise.sessions.delete.title'), destroy_user_session_path
    li= link_to t('devise.registrations.edit.cancel'), registration_path(resource_name), data: { confirm: t('devise.registrations.edit.cancel_confirm', user_id: current_user.id), method: :delete }

  - if devise_mapping.omniauthable?
    - action = action || 'default'
    li.oauth
      p.instruction = (action == 'default' ? t('.oauth.default_instruction') : t('.oauth.instruction', action: action))
      ul
        - resource_class.omniauth_providers.each do |provider|
          - if user_signed_in? && current_user.authorizations.pluck(:provider).include?(provider.to_s)
              li.connected
                span class="#{ provider.to_s }" title="#{ t('.oauth.title_connected', provider: provider.to_s.titleize) }"
                  = provider.to_s.titleize
          - else
            - link_title = (action == 'default' ? t('.oauth.default_title', provider: provider.to_s.titleize) : t('.oauth.title', provider: provider.to_s.titleize, action: action))

            li = link_to provider.to_s.titleize, omniauth_authorize_path(resource_name, provider), title: link_title

  - if user_signed_in? && current_user.admin?
    li
      ul.admin
        li= link_to t('settings.edit.title'), edit_settings_path
        li= link_to t('books.admin.title_no_mode'), books_admin_path
        li= link_to t('links.admin.title'), links_admin_path
